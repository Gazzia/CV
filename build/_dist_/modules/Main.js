import './Main.css.proxy.js';
/* src\modules\Main.svelte generated by Svelte v3.29.4 */
import {
	SvelteComponent,
	add_render_callback,
	append,
	attr,
	check_outros,
	create_component,
	create_in_transition,
	destroy_component,
	destroy_each,
	detach,
	element,
	empty,
	group_outros,
	init,
	insert,
	mount_component,
	noop,
	safe_not_equal,
	space,
	transition_in,
	transition_out
} from "../../web_modules/svelte/internal.js";

import { fade } from "../../web_modules/svelte/transition.js";
import Box from "./Box.js";
import Item from "./Item.js";
import ItemList from "./Item_List.js";
import LI from "./Item_LI.js";
import { pays } from "../data.js";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[0] = list[i];
	return child_ctx;
}

// (22:1) <Box title="Ma formation" dated>
function create_default_slot_7(ctx) {
	let item0;
	let t0;
	let item1;
	let t1;
	let item2;
	let t2;
	let item3;
	let current;

	item0 = new Item({
			props: {
				text: "Simplon - Dev. web/Java",
				date: "2020"
			}
		});

	item1 = new Item({
			props: {
				text: "L1 - Langues Étrangères Appliquées",
				date: "2016"
			}
		});

	item2 = new Item({
			props: {
				text: "Bac économique et social",
				date: "2012-2016"
			}
		});

	item3 = new Item({
			props: {
				text: "Brevet des collèges",
				date: "2008-2012"
			}
		});

	return {
		c() {
			create_component(item0.$$.fragment);
			t0 = space();
			create_component(item1.$$.fragment);
			t1 = space();
			create_component(item2.$$.fragment);
			t2 = space();
			create_component(item3.$$.fragment);
		},
		m(target, anchor) {
			mount_component(item0, target, anchor);
			insert(target, t0, anchor);
			mount_component(item1, target, anchor);
			insert(target, t1, anchor);
			mount_component(item2, target, anchor);
			insert(target, t2, anchor);
			mount_component(item3, target, anchor);
			current = true;
		},
		p: noop,
		i(local) {
			if (current) return;
			transition_in(item0.$$.fragment, local);
			transition_in(item1.$$.fragment, local);
			transition_in(item2.$$.fragment, local);
			transition_in(item3.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(item0.$$.fragment, local);
			transition_out(item1.$$.fragment, local);
			transition_out(item2.$$.fragment, local);
			transition_out(item3.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(item0, detaching);
			if (detaching) detach(t0);
			destroy_component(item1, detaching);
			if (detaching) detach(t1);
			destroy_component(item2, detaching);
			if (detaching) detach(t2);
			destroy_component(item3, detaching);
		}
	};
}

// (29:2) <ItemList title="Web">
function create_default_slot_6(ctx) {
	let li0;
	let t0;
	let li1;
	let t1;
	let li2;
	let current;
	li0 = new LI({ props: { text: "HTML5, CSS/SASS" } });
	li1 = new LI({ props: { text: "Javascript, Svelte" } });
	li2 = new LI({ props: { text: "Google Firebase" } });

	return {
		c() {
			create_component(li0.$$.fragment);
			t0 = space();
			create_component(li1.$$.fragment);
			t1 = space();
			create_component(li2.$$.fragment);
		},
		m(target, anchor) {
			mount_component(li0, target, anchor);
			insert(target, t0, anchor);
			mount_component(li1, target, anchor);
			insert(target, t1, anchor);
			mount_component(li2, target, anchor);
			current = true;
		},
		p: noop,
		i(local) {
			if (current) return;
			transition_in(li0.$$.fragment, local);
			transition_in(li1.$$.fragment, local);
			transition_in(li2.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(li0.$$.fragment, local);
			transition_out(li1.$$.fragment, local);
			transition_out(li2.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(li0, detaching);
			if (detaching) detach(t0);
			destroy_component(li1, detaching);
			if (detaching) detach(t1);
			destroy_component(li2, detaching);
		}
	};
}

// (34:2) <ItemList title="Langues">
function create_default_slot_5(ctx) {
	let li0;
	let t0;
	let li1;
	let t1;
	let li2;
	let t2;
	let li3;
	let current;

	li0 = new LI({
			props: { text: "Anglais", otherData: "Bon" }
		});

	li1 = new LI({
			props: { text: "Espagnol", otherData: "Notions" }
		});

	li2 = new LI({
			props: { text: "Russe", otherData: "Notions" }
		});

	li3 = new LI({
			props: { text: "Esperanto", otherData: "Notions" }
		});

	return {
		c() {
			create_component(li0.$$.fragment);
			t0 = space();
			create_component(li1.$$.fragment);
			t1 = space();
			create_component(li2.$$.fragment);
			t2 = space();
			create_component(li3.$$.fragment);
		},
		m(target, anchor) {
			mount_component(li0, target, anchor);
			insert(target, t0, anchor);
			mount_component(li1, target, anchor);
			insert(target, t1, anchor);
			mount_component(li2, target, anchor);
			insert(target, t2, anchor);
			mount_component(li3, target, anchor);
			current = true;
		},
		p: noop,
		i(local) {
			if (current) return;
			transition_in(li0.$$.fragment, local);
			transition_in(li1.$$.fragment, local);
			transition_in(li2.$$.fragment, local);
			transition_in(li3.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(li0.$$.fragment, local);
			transition_out(li1.$$.fragment, local);
			transition_out(li2.$$.fragment, local);
			transition_out(li3.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(li0, detaching);
			if (detaching) detach(t0);
			destroy_component(li1, detaching);
			if (detaching) detach(t1);
			destroy_component(li2, detaching);
			if (detaching) detach(t2);
			destroy_component(li3, detaching);
		}
	};
}

// (28:1) <Box title="Mes compétences">
function create_default_slot_4(ctx) {
	let itemlist0;
	let t;
	let itemlist1;
	let current;

	itemlist0 = new ItemList({
			props: {
				title: "Web",
				$$slots: { default: [create_default_slot_6] },
				$$scope: { ctx }
			}
		});

	itemlist1 = new ItemList({
			props: {
				title: "Langues",
				$$slots: { default: [create_default_slot_5] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(itemlist0.$$.fragment);
			t = space();
			create_component(itemlist1.$$.fragment);
		},
		m(target, anchor) {
			mount_component(itemlist0, target, anchor);
			insert(target, t, anchor);
			mount_component(itemlist1, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const itemlist0_changes = {};

			if (dirty & /*$$scope*/ 8) {
				itemlist0_changes.$$scope = { dirty, ctx };
			}

			itemlist0.$set(itemlist0_changes);
			const itemlist1_changes = {};

			if (dirty & /*$$scope*/ 8) {
				itemlist1_changes.$$scope = { dirty, ctx };
			}

			itemlist1.$set(itemlist1_changes);
		},
		i(local) {
			if (current) return;
			transition_in(itemlist0.$$.fragment, local);
			transition_in(itemlist1.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(itemlist0.$$.fragment, local);
			transition_out(itemlist1.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(itemlist0, detaching);
			if (detaching) detach(t);
			destroy_component(itemlist1, detaching);
		}
	};
}

// (41:1) <Box title="Parcours professionnel" dated>
function create_default_slot_3(ctx) {
	let item0;
	let t0;
	let item1;
	let t1;
	let item2;
	let t2;
	let item3;
	let t3;
	let item4;
	let t4;
	let item5;
	let t5;
	let item6;
	let current;

	item0 = new Item({
			props: {
				text: "Manut/Aide-Machine",
				date: "Sept. 2019 - 2020"
			}
		});

	item1 = new Item({
			props: {
				text: "Contrats agricoles",
				date: "Avril-Juin 2019"
			}
		});

	item2 = new Item({
			props: {
				text: "Manut. (livrais° meubles)",
				date: "2019"
			}
		});

	item3 = new Item({
			props: {
				text: "Aide dentaire",
				date: "Nov 2018-Jan 2019"
			}
		});

	item4 = new Item({
			props: {
				text: "Contrat agricole",
				date: "Août-Sept 2018"
			}
		});

	item5 = new Item({
			props: {
				text: "Garde d'enfant",
				date: "2017-2018"
			}
		});

	item6 = new Item({
			props: {
				text: "Commis de cuisine/Crêpier",
				date: "2017"
			}
		});

	return {
		c() {
			create_component(item0.$$.fragment);
			t0 = space();
			create_component(item1.$$.fragment);
			t1 = space();
			create_component(item2.$$.fragment);
			t2 = space();
			create_component(item3.$$.fragment);
			t3 = space();
			create_component(item4.$$.fragment);
			t4 = space();
			create_component(item5.$$.fragment);
			t5 = space();
			create_component(item6.$$.fragment);
		},
		m(target, anchor) {
			mount_component(item0, target, anchor);
			insert(target, t0, anchor);
			mount_component(item1, target, anchor);
			insert(target, t1, anchor);
			mount_component(item2, target, anchor);
			insert(target, t2, anchor);
			mount_component(item3, target, anchor);
			insert(target, t3, anchor);
			mount_component(item4, target, anchor);
			insert(target, t4, anchor);
			mount_component(item5, target, anchor);
			insert(target, t5, anchor);
			mount_component(item6, target, anchor);
			current = true;
		},
		p: noop,
		i(local) {
			if (current) return;
			transition_in(item0.$$.fragment, local);
			transition_in(item1.$$.fragment, local);
			transition_in(item2.$$.fragment, local);
			transition_in(item3.$$.fragment, local);
			transition_in(item4.$$.fragment, local);
			transition_in(item5.$$.fragment, local);
			transition_in(item6.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(item0.$$.fragment, local);
			transition_out(item1.$$.fragment, local);
			transition_out(item2.$$.fragment, local);
			transition_out(item3.$$.fragment, local);
			transition_out(item4.$$.fragment, local);
			transition_out(item5.$$.fragment, local);
			transition_out(item6.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(item0, detaching);
			if (detaching) detach(t0);
			destroy_component(item1, detaching);
			if (detaching) detach(t1);
			destroy_component(item2, detaching);
			if (detaching) detach(t2);
			destroy_component(item3, detaching);
			if (detaching) detach(t3);
			destroy_component(item4, detaching);
			if (detaching) detach(t4);
			destroy_component(item5, detaching);
			if (detaching) detach(t5);
			destroy_component(item6, detaching);
		}
	};
}

// (52:3) {#each pays as item}
function create_each_block(ctx) {
	let li;
	let current;
	li = new LI({ props: { text: /*item*/ ctx[0] } });

	return {
		c() {
			create_component(li.$$.fragment);
		},
		m(target, anchor) {
			mount_component(li, target, anchor);
			current = true;
		},
		p: noop,
		i(local) {
			if (current) return;
			transition_in(li.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(li.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(li, detaching);
		}
	};
}

// (51:2) <ItemList title="Voyages">
function create_default_slot_2(ctx) {
	let each_1_anchor;
	let current;
	let each_value = pays;
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	return {
		c() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, each_1_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (dirty & /*pays*/ 0) {
				each_value = pays;
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach(each_1_anchor);
		}
	};
}

// (56:2) <ItemList title="Web">
function create_default_slot_1(ctx) {
	let li;
	let current;

	li = new LI({
			props: {
				text: "Développement de webapps pour des projets personnels"
			}
		});

	return {
		c() {
			create_component(li.$$.fragment);
		},
		m(target, anchor) {
			mount_component(li, target, anchor);
			current = true;
		},
		p: noop,
		i(local) {
			if (current) return;
			transition_in(li.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(li.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(li, detaching);
		}
	};
}

// (50:1) <Box title="Mes loisirs">
function create_default_slot(ctx) {
	let itemlist0;
	let t0;
	let itemlist1;
	let t1;
	let item;
	let current;

	itemlist0 = new ItemList({
			props: {
				title: "Voyages",
				$$slots: { default: [create_default_slot_2] },
				$$scope: { ctx }
			}
		});

	itemlist1 = new ItemList({
			props: {
				title: "Web",
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			}
		});

	item = new Item({ props: { text: "Randonnée" } });

	return {
		c() {
			create_component(itemlist0.$$.fragment);
			t0 = space();
			create_component(itemlist1.$$.fragment);
			t1 = space();
			create_component(item.$$.fragment);
		},
		m(target, anchor) {
			mount_component(itemlist0, target, anchor);
			insert(target, t0, anchor);
			mount_component(itemlist1, target, anchor);
			insert(target, t1, anchor);
			mount_component(item, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const itemlist0_changes = {};

			if (dirty & /*$$scope*/ 8) {
				itemlist0_changes.$$scope = { dirty, ctx };
			}

			itemlist0.$set(itemlist0_changes);
			const itemlist1_changes = {};

			if (dirty & /*$$scope*/ 8) {
				itemlist1_changes.$$scope = { dirty, ctx };
			}

			itemlist1.$set(itemlist1_changes);
		},
		i(local) {
			if (current) return;
			transition_in(itemlist0.$$.fragment, local);
			transition_in(itemlist1.$$.fragment, local);
			transition_in(item.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(itemlist0.$$.fragment, local);
			transition_out(itemlist1.$$.fragment, local);
			transition_out(item.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(itemlist0, detaching);
			if (detaching) detach(t0);
			destroy_component(itemlist1, detaching);
			if (detaching) detach(t1);
			destroy_component(item, detaching);
		}
	};
}

function create_fragment(ctx) {
	let main;
	let box0;
	let t0;
	let box1;
	let t1;
	let box2;
	let t2;
	let box3;
	let main_intro;
	let current;

	box0 = new Box({
			props: {
				title: "Ma formation",
				dated: true,
				$$slots: { default: [create_default_slot_7] },
				$$scope: { ctx }
			}
		});

	box1 = new Box({
			props: {
				title: "Mes compétences",
				$$slots: { default: [create_default_slot_4] },
				$$scope: { ctx }
			}
		});

	box2 = new Box({
			props: {
				title: "Parcours professionnel",
				dated: true,
				$$slots: { default: [create_default_slot_3] },
				$$scope: { ctx }
			}
		});

	box3 = new Box({
			props: {
				title: "Mes loisirs",
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			main = element("main");
			create_component(box0.$$.fragment);
			t0 = space();
			create_component(box1.$$.fragment);
			t1 = space();
			create_component(box2.$$.fragment);
			t2 = space();
			create_component(box3.$$.fragment);
			attr(main, "class", "svelte-oqykqp");
		},
		m(target, anchor) {
			insert(target, main, anchor);
			mount_component(box0, main, null);
			append(main, t0);
			mount_component(box1, main, null);
			append(main, t1);
			mount_component(box2, main, null);
			append(main, t2);
			mount_component(box3, main, null);
			current = true;
		},
		p(ctx, [dirty]) {
			const box0_changes = {};

			if (dirty & /*$$scope*/ 8) {
				box0_changes.$$scope = { dirty, ctx };
			}

			box0.$set(box0_changes);
			const box1_changes = {};

			if (dirty & /*$$scope*/ 8) {
				box1_changes.$$scope = { dirty, ctx };
			}

			box1.$set(box1_changes);
			const box2_changes = {};

			if (dirty & /*$$scope*/ 8) {
				box2_changes.$$scope = { dirty, ctx };
			}

			box2.$set(box2_changes);
			const box3_changes = {};

			if (dirty & /*$$scope*/ 8) {
				box3_changes.$$scope = { dirty, ctx };
			}

			box3.$set(box3_changes);
		},
		i(local) {
			if (current) return;
			transition_in(box0.$$.fragment, local);
			transition_in(box1.$$.fragment, local);
			transition_in(box2.$$.fragment, local);
			transition_in(box3.$$.fragment, local);

			if (!main_intro) {
				add_render_callback(() => {
					main_intro = create_in_transition(main, fade, {});
					main_intro.start();
				});
			}

			current = true;
		},
		o(local) {
			transition_out(box0.$$.fragment, local);
			transition_out(box1.$$.fragment, local);
			transition_out(box2.$$.fragment, local);
			transition_out(box3.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(main);
			destroy_component(box0);
			destroy_component(box1);
			destroy_component(box2);
			destroy_component(box3);
		}
	};
}

class Main extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, null, create_fragment, safe_not_equal, {});
	}
}

export default Main;